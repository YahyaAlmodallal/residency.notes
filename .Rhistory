# Transpose the dataframe
wide_table_transposed <- as.data.frame(t(wide_table))
# Convert row names into a column if needed for sorting
wide_table_transposed$categories <- rownames(wide_table_transposed)
# Sort by the 'Total' row, now a column after transposition
wide_table_transposed <- wide_table_transposed %>%
arrange(desc(`Total`))  # assuming 'Total' is now a column after transposition
# Optionally, transpose back if needed for presentation
wide_table_sorted <- t(wide_table_transposed)
# Convert back to data.frame if necessary
wide_table_sorted <- as.data.frame(wide_table_sorted)
# Calculate the grand total (excluding the 'Total' and 'Other' columns)
grand_total <- wide_table["Total", "total"]
# Convert 'Total' row and column to show both counts and percentages
wide_table["Total", -which(names(wide_table) %in% c("total", "Other"))] <-
sapply(wide_table["Total", -which(names(wide_table) %in% c("total", "Other"))],
function(x) sprintf("%d (%.2f%%)", x, x / grand_total * 100))
wide_table[-nrow(wide_table), "total"] <-
sapply(wide_table[-nrow(wide_table), "total"],
function(x) sprintf("%d (%.2f%%)", x, x / grand_total * 100))
# Convert 'Other' column to show both count and percentage for the 'Total' row
wide_table["Total", "Other"] <-
sprintf("%d (%.2f%%)", wide_table["Total", "Other"], wide_table["Total", "Other"] / grand_total * 100)
write.csv(wide_table, "table.1.csv")
writeLines(low_total_columns, "other.columns.txt")
writeLines(low_total_rows, "other.rows.txt")
View(k)
resident_counts <- resident.names %>%
summarise(across(everything(), ~ sum(!is.na(.))))
cons.data <- readRDS("cons_data.rds")
z = sum_df(cons.data)
# Summary statement
print(
results <- c(
paste("Total number of notes residents contributed to is:", nrow(cons.data)),
paste("Number of ambulatory "),
paste("Total number per fiscal year, 21-22, 22-23, 23-24, respectively is:", nrow(cons.data %>% filter(dtofsvc >= ymd_hms("2021-07-01 00:00:00") & dtofsvc <= ymd_hms("2022-06-30 23:59:59"))), nrow(cons.data %>% filter(dtofsvc >= ymd_hms("2022-07-01 00:00:00") & dtofsvc <= ymd_hms("2023-06-30 23:59:59"))), nrow(cons.data %>% filter(dtofsvc >= ymd_hms("2023-07-01 00:00:00") & dtofsvc <= ymd_hms("2024-06-30 23:59:59")))),
paste("Total number of residents", sum(!is.na(res_vector))),
paste("Number of residents per class, PGY-3, PGY-2, and PGY-1, respectively:", resident_counts$PGY.5 + resident_counts$PGY.4 + resident_counts$PGY.3, resident_counts$PGY.4 + resident_counts$PGY.2 + resident_counts$PGY.3, resident_counts$PGY.1 + resident_counts$PGY.2 + resident_counts$PGY.3),
paste("Number of residents per FY, 21-22, 22-23, and 23-24, respectively:", resident_counts$PGY.5 + resident_counts$PGY.4 + resident_counts$PGY.3, resident_counts$PGY.4 + resident_counts$PGY.2 + resident_counts$PGY.3, resident_counts$PGY.1 + resident_counts$PGY.2 + resident_counts$PGY.3),
paste("Time (days) spent on note documentation (days), total, residents, staff, and other, respectively:", sum(cons.data$total.time)/60/60/24, sum(cons.data$resident.time)/60/60/24, sum(cons.data$staff.time, na.rm = TRUE)/60/60/24, sum(cons.data$total.time)/60/60/24 - sum(cons.data$resident.time)/60/60/24 - sum(cons.data$staff.time, na.rm = TRUE)/60/60/24),
paste("Time (days) spent on documentation in PM shift for inpatient notes, after-hours for ambulatory notes, and on a weekend day, respectively:", sum(cons.data$pm, na.rm = TRUE)/60/60/24, sum(cons.data$after.hours, na.rm = TRUE)/60/60/24, sum(cons.data$weekend, na.rm = TRUE)/60/60/24),
paste("Percentage of notes to which residents contributed >90%, >50%, and <10% of the time, respectively, is:", nrow(cons.data %>% filter(resident.percent >=90)) / nrow(cons.data) * 100, nrow(cons.data %>% filter(resident.percent >=50)) / nrow(cons.data) * 100, nrow(cons.data %>% filter(resident.percent <10)) / nrow(cons.data) * 100)
)
)
per.resident <- readRDS("per.resident.rds")
View(listpgy1)
per.resident <- readRDS("per.resident.rds")
pgy1 <- per.resident %>%
filter(pgy %in% c("pgy1.21.22", "pgy1.22.23", "pgy1.23.24"))
pgy2 <- per.resident %>%
filter(pgy %in% c("pgy2.21.22", "pgy2.22.23", "pgy2.23.24"))
pgy3 <- per.resident %>%
filter(pgy %in% c("pgy3.21.22", "pgy3.22.23", "pgy3.23.24"))
# Step 2: Split the data frame into a list of data frames based on unique values in 'author' column
listpgy1 <- split(pgy1, pgy1$author)
listpgy2 <- split(pgy2, pgy2$author)
listpgy3 <- split(pgy3, pgy3$author)
View(listpgy1)
all.data <- readRDS("all_data.rds")
all.data <- readRDS("all_data.rds")
# 4- Individual resident file (consolidated by residents)
resident.data <- all.data %>%
filter(pgy != "NA")
list.residents <- split(resident.data, resident.data$author)
View(list.residents)
str(resident.data)
# Assuming 'resident.data' is your DataFrame
unique_days_count <- resident.data %>%
mutate(dtofsvc_date = as.Date(dtofsvc)) %>%
summarise(n_unique_days = n_distinct(dtofsvc_date))
print(unique_days_count)
# Function to count unique days in the 'dtofsvc' column of a dataframe
count_unique_days <- function(df) {
unique_days_count <- df %>%
mutate(dtofsvc_date = as.Date(dtofsvc)) %>%
summarise(n_unique_days = n_distinct(dtofsvc_date))
return(unique_days_count)
}
# Apply the function to each dataframe in the list
list_unique_days_counts <- lapply(list.residents, count_unique_days)
# If you want to see the results for each dataframe
list_unique_days_counts
View(list_unique_days_counts)
str(list_unique_days_counts)
# Function to count unique days in the 'dtofsvc' column of a dataframe
count_unique_days <- function(df) {
unique_days_count <- df %>%
mutate(dtofsvc_date = as.Date(dtofsvc)) %>%
summarise(n_unique_days = n_distinct(dtofsvc_date),
resident.time = sum(`edittime(seconds)`))
return(unique_days_count)
}
# Apply the function to each dataframe in the list
list_unique_days_counts <- lapply(list.residents, count_unique_days)
View(list_unique_days_counts)
unique_days_count <- df %>%
mutate(dtofsvc_date = as.Date(dtofsvc)) %>%
summarise(n_unique_days = n_distinct(dtofsvc_date),
resident.time = sum(`edittime(seconds)`/60/60/24))
# Function to count unique days in the 'dtofsvc' column of a dataframe
count_unique_days <- function(df) {
unique_days_count <- df %>%
mutate(dtofsvc_date = as.Date(dtofsvc)) %>%
summarise(n_unique_days = n_distinct(dtofsvc_date),
resident.time = sum(`edittime(seconds)`/60/60/24))
return(unique_days_count)
}
# Apply the function to each dataframe in the list
list_unique_days_counts <- lapply(list.residents, count_unique_days)
View(list_unique_days_counts)
str(list_unique_days_counts)
combined_df <- bind_rows(list_unique_days_counts, .id = "ResidentName")
View(combined_df)
# Function to count unique days, considering day and night shifts
count_shift_days <- function(df) {
# Create a shift indicator based on the time
df <- df %>%
mutate(
dtofsvc_date = as.Date(dtofsvc),
shift = if_else(hour(dtofsvc) >= 7 & hour(dtofsvc) < 18, "Day", "Night"),
# Adjust date for night shift; if it starts before midnight, it's part of the next day
dtofsvc_date_adjusted = if_else(shift == "Night" & hour(dtofsvc) < 7, dtofsvc_date - days(1), dtofsvc_date)
)
# Split data into day and night shifts
day_df <- df %>% filter(shift == "Day")
night_df <- df %>% filter(shift == "Night")
# Count unique days for each shift
day_count <- n_distinct(day_df$dtofsvc_date)
night_count <- n_distinct(night_df$dtofsvc_date_adjusted)
# Return a tibble with the counts
tibble(day_shifts = day_count, night_shifts = night_count)
}
# Apply this function to each dataframe in a list
list_shift_counts <- lapply(list.residents, count_shift_days)
# Optionally, combine all results into one dataframe with names if the list has names
combined_results <- bind_rows(list_shift_counts, .id = "ResidentID")
View(combined_results)
# Function to count unique days, considering day and night shifts
count_shift_days <- function(df) {
# Create a shift indicator based on the time
df <- df %>%
mutate(
dtofsvc_date = as.Date(dtofsvc),
shift = if_else(hour(dtofsvc) >= 7 & hour(dtofsvc) < 18, "Day", "Night"),
# Adjust date for night shift; if it starts before midnight, it's part of the next day
dtofsvc_date_adjusted = if_else(shift == "Night" & hour(dtofsvc) < 7, dtofsvc_date - days(1), dtofsvc_date)
)
# Count unique days for each shift
day_count <- n_distinct(day_df$dtofsvc_date)
night_count <- n_distinct(night_df$dtofsvc_date_adjusted)
# Return a tibble with the counts
tibble(day_shifts = day_count, night_shifts = night_count)
}
# Apply this function to each dataframe in a list
list_shift_counts <- lapply(list.residents, count_shift_days)
night_count <- n_distinct(df$dtofsvc_date_adjusted)
# Function to count unique days, considering day and night shifts
count_shift_days <- function(df) {
# Create a shift indicator based on the time
df <- df %>%
mutate(
dtofsvc_date = as.Date(dtofsvc),
shift = if_else(hour(dtofsvc) >= 7 & hour(dtofsvc) < 18, "Day", "Night"),
# Adjust date for night shift; if it starts before midnight, it's part of the next day
dtofsvc_date_adjusted = if_else(shift == "Night" & hour(dtofsvc) < 7, dtofsvc_date - days(1), dtofsvc_date)
)
# Count unique days for each shift
day_count <- n_distinct(df$dtofsvc_date)
night_count <- n_distinct(df$dtofsvc_date_adjusted)
# Return a tibble with the counts
tibble(day_shifts = day_count, night_shifts = night_count)
}
# Apply this function to each dataframe in a list
list_shift_counts <- lapply(list.residents, count_shift_days)
# Optionally, combine all results into one dataframe with names if the list has names
combined_results <- bind_rows(list_shift_counts, .id = "ResidentID")
# Function to count unique days, considering day and night shifts
count_shift_days <- function(df) {
# Create a shift indicator based on the time
df <- df %>%
mutate(
dtofsvc_date = as.Date(dtofsvc),
shift = if_else(hour(dtofsvc) >= 7 & hour(dtofsvc) < 18, "Day", "Night"),
# Adjust date for night shift; if it starts before midnight, it's part of the next day
dtofsvc_date_adjusted = if_else(shift == "Night" & hour(dtofsvc) < 7, dtofsvc_date - days(1), dtofsvc_date)
)
# Count unique days for each shift
count <- n_distinct(df$dtofsvc_date_adjusted)
# Return a tibble with the counts
tibble(count)
}
# Apply this function to each dataframe in a list
list_shift_counts <- lapply(list.residents, count_shift_days)
# Function to count unique days, considering day and night shifts
count_shift_days <- function(df) {
# Create a shift indicator based on the time
df <- df %>%
mutate(
dtofsvc_date = as.Date(dtofsvc),
shift = if_else(hour(dtofsvc) >= 7 & hour(dtofsvc) < 18, "Day", "Night"),
# Adjust date for night shift; if it starts before midnight, it's part of the next day
dtofsvc_date_adjusted = if_else(shift == "Night" & hour(dtofsvc) < 7, dtofsvc_date - days(1), dtofsvc_date)
)
# Count unique days for each shift
count <- n_distinct(df$dtofsvc_date_adjusted)
# Return a tibble with the counts
tibble(count)
}
# Apply this function to each dataframe in a list
list_shift_counts <- lapply(list.residents, count_shift_days)
# Apply this function to each dataframe in a list
list_shift_counts <- lapply(list.residents, count_shift_days)
# Optionally, combine all results into one dataframe with names if the list has names
combined_results <- bind_rows(list_shift_counts, .id = "ResidentID")
# Function to count unique days, considering day and night shifts (a day is between 0700 of a given day and 0700 the next day)
note_days <- function(df) {
# Create a shift indicator based on the time
df <- df %>%
mutate(
dtofsvc_date = as.Date(dtofsvc),
shift = if_else(hour(dtofsvc) >= 7 & hour(dtofsvc) < 18, "Day", "Night"),
# Adjust date for night shift; if it starts before midnight, it's part of the next day
dtofsvc_date_adjusted = if_else(shift == "Night" & hour(dtofsvc) < 7, dtofsvc_date - days(1), dtofsvc_date)
)
# Count unique days for each shift
count <- n_distinct(df$dtofsvc_date_adjusted)
time.in.days = sum(`edittime(seconds)`/60/60/24)
# Return a tibble with the counts
tibble(count)
}
# Apply this function to each dataframe in a list
list_shift_counts <- lapply(list.residents, note_days)
# Optionally, combine all results into one dataframe with names if the list has names
combined_results <- bind_rows(list_shift_counts, .id = "ResidentID")
# Function to count unique days, considering day and night shifts (a day is between 0700 of a given day and 0700 the next day)
note_days <- function(df) {
# Create a shift indicator based on the time
df <- df %>%
mutate(
dtofsvc_date = as.Date(dtofsvc),
shift = if_else(hour(dtofsvc) >= 7 & hour(dtofsvc) < 18, "Day", "Night"),
# Adjust date for night shift; if it starts before midnight, it's part of the next day
dtofsvc_date_adjusted = if_else(shift == "Night" & hour(dtofsvc) < 7, dtofsvc_date - days(1), dtofsvc_date)
)
# Count unique days for each shift
count <- n_distinct(df$dtofsvc_date_adjusted)
time.in.days = sum(df$`edittime(seconds)`/60/60/24)
# Return a tibble with the counts
tibble(count)
}
# Apply this function to each dataframe in a list
list_shift_counts <- lapply(list.residents, note_days)
# Optionally, combine all results into one dataframe with names if the list has names
combined_results <- bind_rows(list_shift_counts, .id = "ResidentID")
# Function to count unique days, considering day and night shifts (a day is between 0700 of a given day and 0700 the next day)
note_days <- function(df) {
# Create a shift indicator based on the time
df <- df %>%
mutate(
dtofsvc_date = as.Date(dtofsvc),
shift = if_else(hour(dtofsvc) >= 7 & hour(dtofsvc) < 18, "Day", "Night"),
# Adjust date for night shift; if it starts before midnight, it's part of the next day
dtofsvc_date_adjusted = if_else(shift == "Night" & hour(dtofsvc) < 7, dtofsvc_date - days(1), dtofsvc_date)
) %>%
summarize(count = n_distinct(df$dtofsvc_date_adjusted),
time.in.days = sum(df$`edittime(seconds)`/60/60/24))
# Return a tibble with the counts
tibble(df)
}
# Apply this function to each dataframe in a list
list_shift_counts <- lapply(list.residents, note_days)
# Optionally, combine all results into one dataframe with names if the list has names
combined_results <- bind_rows(list_shift_counts, .id = "ResidentID")
# Function to count unique days, considering day and night shifts (a day is between 0700 of a given day and 0700 the next day)
note_days <- function(df) {
# Create a shift indicator based on the time
df <- df %>%
mutate(
dtofsvc_date = as.Date(dtofsvc),
shift = if_else(hour(dtofsvc) >= 7 & hour(dtofsvc) < 18, "Day", "Night"),
# Adjust date for night shift; if it starts before midnight, it's part of the next day
dtofsvc_date_adjusted = if_else(shift == "Night" & hour(dtofsvc) < 7, dtofsvc_date - days(1), dtofsvc_date)
) %>%
summarize(count = n_distinct(dtofsvc_date_adjusted),
time.in.days = sum(`edittime(seconds)`/60/60/24))
# Return a tibble with the counts
tibble(df)
}
# Apply this function to each dataframe in a list
list_shift_counts <- lapply(list.residents, note_days)
# Optionally, combine all results into one dataframe with names if the list has names
combined_results <- bind_rows(list_shift_counts, .id = "ResidentID")
# Function to count unique days, considering day and night shifts (a day is between 0700 of a given day and 0700 the next day)
note_days <- function(df) {
# Create a shift indicator based on the time
df <- df %>%
mutate(
shift = if_else(hour(dtofsvc) >= 7 & hour(dtofsvc) < 18, "Day", "Night"),
# Adjust date for night shift; if it starts before midnight, it's part of the next day
dtofsvc_date_adjusted = if_else(shift == "Night" & hour(dtofsvc) < 7, dtofsvc_date - days(1), dtofsvc_date)
) %>%
summarize(count = n_distinct(dtofsvc_date_adjusted),
time.in.days = sum(`edittime(seconds)`/60/60/24))
# Return a tibble with the counts
tibble(df)
}
# Apply this function to each dataframe in a list
list_shift_counts <- lapply(list.residents, note_days)
# Function to count unique days, considering day and night shifts (a day is between 0700 of a given day and 0700 the next day)
note_days <- function(df) {
# Create a shift indicator based on the time
df <- df %>%
mutate(
dtofsvc_date = dtofsvc,
shift = if_else(hour(dtofsvc) >= 7 & hour(dtofsvc) < 18, "Day", "Night"),
# Adjust date for night shift; if it starts before midnight, it's part of the next day
dtofsvc_date_adjusted = if_else(shift == "Night" & hour(dtofsvc) < 7, dtofsvc_date - days(1), dtofsvc_date)
) %>%
summarize(count = n_distinct(dtofsvc_date_adjusted),
time.in.days = sum(`edittime(seconds)`/60/60/24))
# Return a tibble with the counts
tibble(df)
}
# Apply this function to each dataframe in a list
list_shift_counts <- lapply(list.residents, note_days)
# Apply this function to each dataframe in a list
list_shift_counts <- lapply(list.residents, note_days)
# Optionally, combine all results into one dataframe with names if the list has names
combined_results <- bind_rows(list_shift_counts, .id = "ResidentID")
# Create a shift indicator based on the time
df <- df %>%
mutate(
dtofsvc_date = as.Date(dtofsvc),
shift = if_else(hour(dtofsvc) >= 7 & hour(dtofsvc) < 18, "Day", "Night"),
# Adjust date for night shift; if it starts before midnight, it's part of the next day
dtofsvc_date_adjusted = if_else(shift == "Night" & hour(dtofsvc) < 6, dtofsvc_date - days(1), dtofsvc_date)
) %>%
summarize(count = n_distinct(dtofsvc_date_adjusted),
time.in.days = sum(`edittime(seconds)`/60/60/24))
# Function to count unique days, considering day and night shifts (a day is between 0700 of a given day and 0700 the next day)
note_days <- function(df) {
# Create a shift indicator based on the time
df <- df %>%
mutate(
dtofsvc_date = as.Date(dtofsvc),
shift = if_else(hour(dtofsvc) >= 7 & hour(dtofsvc) < 18, "Day", "Night"),
# Adjust date for night shift; if it starts before midnight, it's part of the next day
dtofsvc_date_adjusted = if_else(shift == "Night" & hour(dtofsvc) < 6, dtofsvc_date - days(1), dtofsvc_date)
) %>%
summarize(count = n_distinct(dtofsvc_date_adjusted),
time.in.days = sum(`edittime(seconds)`/60/60/24))
# Return a tibble with the counts
tibble(df)
}
# Apply this function to each dataframe in a list
list_shift_counts <- lapply(list.residents, note_days)
# Apply this function to each dataframe in a list
list_shift_counts <- lapply(list.residents, note_days)
# Optionally, combine all results into one dataframe with names if the list has names
combined_results <- bind_rows(list_shift_counts, .id = "ResidentID")
# Function to count unique days, considering day and night shifts (a day is between 0700 of a given day and 0700 the next day)
note_days <- function(df) {
# Create a shift indicator based on the time
df <- df %>%
mutate(
dtofsvc_date = as.Date(dtofsvc),
shift = if_else(hour(dtofsvc) >= 7 & hour(dtofsvc) < 18, "Day", "Night"),
# Adjust date for night shift; if it starts before midnight, it's part of the next day
dtofsvc_date_adjusted = if_else(shift == "Night" & hour(dtofsvc) < 5, dtofsvc_date - days(1), dtofsvc_date)
) %>%
summarize(count = n_distinct(dtofsvc_date_adjusted),
time.in.days = sum(`edittime(seconds)`/60/60/24))
# Return a tibble with the counts
tibble(df)
}
# Apply this function to each dataframe in a list
list_shift_counts <- lapply(list.residents, note_days)
# Apply this function to each dataframe in a list
list_shift_counts <- lapply(list.residents, note_days)
# Optionally, combine all results into one dataframe with names if the list has names
combined_results <- bind_rows(list_shift_counts, .id = "ResidentID")
sum(combined_df$n_unique_days)
sum(combined_results$n_unique_days)
sum(combined_results$count)
# Function to count unique days, considering day and night shifts (a day is between 0700 of a given day and 0700 the next day)
note_days <- function(df) {
# Create a shift indicator based on the time
df <- df %>%
mutate(
dtofsvc_date = as.Date(dtofsvc),
shift = if_else(hour(dtofsvc) >= 7 & hour(dtofsvc) < 18, "Day", "Night"),
# Adjust date for night shift; if it starts before midnight, it's part of the next day
dtofsvc_date_adjusted = if_else(shift == "Night" & hour(dtofsvc) < 7, dtofsvc_date - days(1), dtofsvc_date)
) %>%
summarize(count = n_distinct(dtofsvc_date_adjusted),
time.in.days = sum(`edittime(seconds)`/60/60/24))
# Return a tibble with the counts
tibble(df)
}
# Apply this function to each dataframe in a list
list_shift_counts <- lapply(list.residents, note_days)
# Apply this function to each dataframe in a list
list_shift_counts <- lapply(list.residents, note_days)
# Optionally, combine all results into one dataframe with names if the list has names
combined_results <- bind_rows(list_shift_counts, .id = "ResidentID")
sum(combined_results$n_unique_days)
sum(combined_results$count)
sum(combined_df$n_unique_days)
print(sum(combined_results$count))
print(sum(combined_df$n_unique_days))
# Function to count unique days, considering day and night shifts (a day is between 0700 of a given day and 0700 the next day)
note_days <- function(df) {
# Create a shift indicator based on the time
df <- df %>%
mutate(
dtofsvc_date = as.Date(dtofsvc),
shift = if_else(hour(dtofsvc) >= 7 & hour(dtofsvc) < 18, "Day", "Night"),
# Adjust date for night shift; if it starts before midnight, it's part of the next day
dtofsvc_date_adjusted = if_else(shift == "Night" & hour(dtofsvc) < 6, dtofsvc_date - days(1), dtofsvc_date)
) %>%
summarize(count = n_distinct(dtofsvc_date_adjusted),
time.in.days = sum(`edittime(seconds)`/60/60/24))
# Return a tibble with the counts
tibble(df)
}
# Apply this function to each dataframe in a list
list_shift_counts <- lapply(list.residents, note_days)
# Optionally, combine all results into one dataframe with names if the list has names
combined_results <- bind_rows(list_shift_counts, .id = "ResidentID")
print(sum(combined_results$count))
print(sum(combined_df$n_unique_days))
# Function to count unique days, considering day and night shifts (a day is between 0700 of a given day and 0700 the next day)
note_days <- function(df) {
# Create a shift indicator based on the time
df <- df %>%
mutate(
dtofsvc_date = as.Date(dtofsvc),
shift = if_else(hour(dtofsvc) >= 7 & hour(dtofsvc) < 18, "Day", "Night"),
# Adjust date for night shift; if it starts before midnight, it's part of the next day
dtofsvc_date_adjusted = if_else(shift == "Night" & hour(dtofsvc) < 5, dtofsvc_date - days(1), dtofsvc_date)
) %>%
summarize(count = n_distinct(dtofsvc_date_adjusted),
time.in.days = sum(`edittime(seconds)`/60/60/24))
# Return a tibble with the counts
tibble(df)
}
# Apply this function to each dataframe in a list
list_shift_counts <- lapply(list.residents, note_days)
# Optionally, combine all results into one dataframe with names if the list has names
combined_results <- bind_rows(list_shift_counts, .id = "ResidentID")
print(sum(combined_results$count))
print(sum(combined_df$n_unique_days))
# Function to count unique days, considering day and night shifts (a day is between 0700 of a given day and 0700 the next day)
note_days <- function(df) {
# Create a shift indicator based on the time
df <- df %>%
mutate(
dtofsvc_date = as.Date(dtofsvc),
shift = if_else(hour(dtofsvc) >= 7 & hour(dtofsvc) < 18, "Day", "Night"),
# Adjust date for night shift; if it starts before midnight, it's part of the next day
dtofsvc_date_adjusted = if_else(shift == "Night" & hour(dtofsvc) < 6.5, dtofsvc_date - days(1), dtofsvc_date)
) %>%
summarize(count = n_distinct(dtofsvc_date_adjusted),
time.in.days = sum(`edittime(seconds)`/60/60/24))
# Return a tibble with the counts
tibble(df)
}
# Apply this function to each dataframe in a list
list_shift_counts <- lapply(list.residents, note_days)
# Optionally, combine all results into one dataframe with names if the list has names
combined_results <- bind_rows(list_shift_counts, .id = "ResidentID")
print(sum(combined_results$count))
print(sum(combined_df$n_unique_days))
write.csv(combined_results, "counts of days.csv")
write.csv(combined_results, "counts of days.csv")
get)wd
get(wd)
getwd()
pgy1 <- all.data %>%
filter(pgy %in% c("pgy1.21.22", "pgy1.22.23", "pgy1.23.24"))
pgy2 <- all.data %>%
filter(pgy %in% c("pgy2.21.22", "pgy2.22.23", "pgy2.23.24"))
pgy3 <- all.data %>%
filter(pgy %in% c("pgy3.21.22", "pgy3.22.23", "pgy3.23.24"))
list.residents.1 <- split(pgy1, pgy1$author)
list.residents.2 <- split(pgy2, pgy2$author)
list.residents.3 <- split(pgy3, pgy3$author)
# Function to count unique days, considering day and night shifts (a day is between 0700 of a given day and 0700 the next day)
note_days <- function(df) {
# Create a shift indicator based on the time
df <- df %>%
mutate(
dtofsvc_date = as.Date(dtofsvc),
shift = if_else(hour(dtofsvc) >= 7 & hour(dtofsvc) < 18, "Day", "Night"),
# Adjust date for night shift; if it starts before midnight, it's part of the next day
dtofsvc_date_adjusted = if_else(shift == "Night" & hour(dtofsvc) < 6, dtofsvc_date - days(1), dtofsvc_date)
) %>%
summarize(count = n_distinct(dtofsvc_date_adjusted),
time.in.days = sum(`edittime(seconds)`/60/60/24))
# Return a tibble with the counts
tibble(df)
}
# Apply this function to each dataframe in a list
list_shift_counts.1 <- lapply(list.residents.1, note_days)
list_shift_counts.2 <- lapply(list.residents.2, note_days)
list_shift_counts.3 <- lapply(list.residents.3, note_days)
# Optionally, combine all results into one dataframe with names if the list has names
combined_results <- bind_rows(list_shift_counts.1, list_shift_counts.2, list_shift_counts.3, .id = "ResidentID")
write.csv(combined_results, "counts of days per class.csv")
258+210+258
12900 + 10080 + 11610
